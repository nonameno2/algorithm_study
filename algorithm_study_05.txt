PART 01 해시


해시란? 
데이터를 다루는 기법 중 하나로 검색과 저장이 아주 유용한 구조
key와 value 쌍으로 데이터를 저장한다


해시의 구조
key - 해시 함수 - 해시 테이블(value)


해시함수란?
임의의 길이를 갖는 메시지를 입력받아 고정된 길이의 해시값을 출력하는 함수


해시 구현 방법
파이썬 - 딕셔너리 활용

1) 딕셔너리 삽입
hash = dict()
hash = {}

hash[1] = 'apple'
hash['banana'] = 3
hash[(4, 5)] = [1, 2, 3]
hash[10] = dict({1:'a', 2:'b'})

(X) hash[[1, 2, 3]] = 5 
(X) hash[{1, 2, 3}] = 'orange'
배열과 집합은 key 값으로 사용할 수 없다
배열과 집합은 해시 함수에 의해 index로 변환될 수 없기 때문

2) 딕셔너리 수정
hash[1] = 'melon'
hash['banana'] = 10

3) 딕셔너리 값 추출
hash.pop(1) -> 'melon'
hasp.pop('banana') -> 10
hash.pop((4, 5)) -> [1, 2, 3]
hahs.pop(10) -> {1:'a', 2:'b'}

4) 딕셔너리 삭제
del hash[1] 
del hash['banana']
del hash[(4, 5)]
del hash[10]

5) 딕셔너리 활용

5.1) 딕셔너리 루프
hash = dict()
hash.keys() - key 추출 (list)
hash.values() - value 추출 (list)
hash.items() - key와 value 추출 (tuple의 list)

hash = dict()
for i in range(1, 6):
    hash[i] = i ** 2
for k in hash.keys():
    print(k)
1
2
3
4
5
for v in hash.values():
    print(v)
1
4
9
16
25
for k, v in hash.items():
    print(k, v)
1 1
2 4
3 9
4 16
5 25

5.2) 딕셔너리 정렬
sorted()
언제나 list 타입을 반환

hash = dict({1:10, 3:12, 5:7, 7:6, 4:5})

오름차순 정렬
keys
sorted(hash.keys(), key = lambda x:x)
[1, 3, 4, 5, 7]

vlaues
sorted(hash.vlaues(), key = lambda x:x)
[5, 6, 7, 10, 12]

keys vlaues
sorted(hash.items(), key = lambda x:x)
[(1, 10), (3, 12), (4, 5), (5, 7), (7, 6)]

내림차순 정렬
keys
sorted(hash.keys(), key = lambda x:-x)
[7, 5, 4, 3, 1]

vlaues
sorted(hash.vlaues(), key = lambda x:-x)
[12, 10, 7, 6, 5]

keys vlaues
sorted(hash.items(), key = lambda x:-x)
ERROR
튜플에는 마이너스를 줄 수 없다

sorted(hash.items(), key = lambda x:-x[1])
[(3, 12), (1, 10), (5, 7), (7, 6), (4, 5)]

(x[0], x[1]) : key 오름차순, value 오름차순
(-x[0], x[1]) : key 내림차순, value 오름차순
(x[1], x[0]) : value 오름차순, key 오름차순
